import 'dart:async';
import 'package:pointo/screens/main/task_detail/widgets/animated_task_item_widget.dart';
import 'package:pointo/screens/main/task_detail/widgets/animation_manager.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:pointo/gen_l10n/app_localizations.dart';

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–∏–¥–∂–µ—Ç –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º
class TaskItemsReorderableList extends StatefulWidget {
  final ScrollController scrollController;
  final List<Map<String, dynamic>> items;
  final Map<String, bool> editingItems;
  final Map<String, TextEditingController> itemControllers;
  final Map<String, FocusNode> itemFocusNodes;
  final String? currentEditingItemId;
  final bool canEdit;
  final Map<String, Map<String, dynamic>> usersCache;

  // –ö–æ–ª–±—ç–∫–∏
  final Function(String itemId, String content) onToggleEditing;
  final Function(String itemId) onSaveItemContent;
  final Function(Map<String, dynamic> item) onShowItemOptions;
  final Function(String itemId, bool? value) onCheckChanged;
  final Function(Map<String, dynamic> item, int? oldIndex, int? newIndex) onReorderFinished;
  final Function(String) formatDeadline;
  final Function(String?) isDeadlineExpired;
  final Function(String?) getDeadlineColor;
  final Function(String) getAvatarColor;
  final Function(String) getCachedUserById;
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ü–û–õ–ï - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  final Function(String userId)? onNavigateToProfile;

  const TaskItemsReorderableList({
    Key? key,
    required this.scrollController,
    required this.items,
    required this.editingItems,
    required this.itemControllers,
    required this.itemFocusNodes,
    required this.currentEditingItemId,
    required this.canEdit,
    required this.usersCache,
    required this.onToggleEditing,
    required this.onSaveItemContent,
    required this.onShowItemOptions,
    required this.onCheckChanged,
    required this.onReorderFinished,
    required this.formatDeadline,
    required this.isDeadlineExpired,
    required this.getDeadlineColor,
    required this.getAvatarColor,
    required this.getCachedUserById,
    this.onNavigateToProfile, // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–ê–†–ê–ú–ï–¢–†
  }) : super(key: key);

  // –£–î–ê–õ–Ø–ï–ú –≠–¢–£ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–£–Æ –°–¢–†–û–ö–£:
  // get onNavigateToProfile => UserProfilePage;

  @override
  State<TaskItemsReorderableList> createState() => _TaskItemsReorderableListState();
}

// –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
class _TaskItemsReorderableListState extends State<TaskItemsReorderableList>
    with TickerProviderStateMixin {
  Timer? _longPressTimer;
  bool _longPressTriggered = false;
  Map<String, dynamic>? _longPressedItem;
  bool _isDragging = false;
  bool _hasMoved = false;
  Offset? _startPosition;

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  late List<Map<String, dynamic>> _localItems;

  // –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  Map<String, AnimationController> _itemAnimations = {};
  Map<String, Animation<double>> _scaleAnimations = {};
  Map<String, Animation<double>> _fadeAnimations = {};
  Map<String, Animation<Offset>> _slideAnimations = {};

  // –ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –¥–ª—è reorder –∞–Ω–∏–º–∞—Ü–∏–∏
  Map<String, AnimationController> _reorderAnimations = {};

  @override
  void initState() {
    super.initState();
    _localItems = widget.items.map((item) => Map<String, dynamic>.from(item)).toList();
    _initializeAnimations();
  }

  @override
  void didUpdateWidget(TaskItemsReorderableList oldWidget) {
    super.didUpdateWidget(oldWidget);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏
    final newLocalItems = widget.items.map((item) => Map<String, dynamic>.from(item)).toList();

    _updateAnimations(oldWidget.items);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    _localItems = newLocalItems;
  }

  @override
  void dispose() {
    _longPressTimer?.cancel();
    _disposeAllAnimations();
    super.dispose();
  }

  void _initializeAnimations() {
    for (var item in _localItems) {
      _createAnimationForItem(item['id'], shouldAnimate: false);
    }
  }

  void _updateAnimations(List<Map<String, dynamic>> oldItems) {
    print("üîÑ _updateAnimations –≤—ã–∑–≤–∞–Ω");

    final oldIds = oldItems.map((item) => item['id'] as String).toSet();
    final newIds = widget.items.map((item) => item['id'] as String).toSet();

    // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    final removedIds = oldIds.difference(newIds);
    for (final id in removedIds) {
      print("‚ùå –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞: $id");
      _disposeAnimationForItem(id);
    }

    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    final addedIds = newIds.difference(oldIds);
    for (final id in addedIds) {
      print("‚úÖ –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞: $id");
      _createAnimationForItem(id, shouldAnimate: true);

      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—è–≤–ª–µ–Ω–∏—è
      _setAnimationFlag(id, 'isAppearing', true);
      _setTemporaryAnimationFlag(id, 'isAppearing', Duration(milliseconds: 400));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ù–ï –ø–æ–∑–∏—Ü–∏–π)
    for (var newItem in widget.items) {
      final id = newItem['id'] as String;

      if (oldIds.contains(id)) {
        final oldItem = oldItems.firstWhere((old) => old['id'] == id);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–∫–ª—é—á–∞–µ–º position)
        if (_hasItemChanged(oldItem, newItem)) {
          print("üìù –≠–ª–µ–º–µ–Ω—Ç $id –∏–∑–º–µ–Ω–∏–ª—Å—è (–∫–æ–Ω—Ç–µ–Ω—Ç/—á–µ–∫–±–æ–∫—Å/–¥–µ–¥–ª–∞–π–Ω)");
          _animateItemChange(id);

          _setAnimationFlag(id, 'isUpdating', true);
          _setTemporaryAnimationFlag(id, 'isUpdating', Duration(milliseconds: 500));
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º reorder –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if (newItem['isReordering'] == true && !_reorderAnimations.containsKey(id)) {
          print("üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ reorder –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ $id, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é");
          _animateReorderChange(id);
        }
      }
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ _hasItemChanged (–∏—Å–∫–ª—é—á–∞–µ–º position)
  bool _hasItemChanged(Map<String, dynamic> oldItem, Map<String, dynamic> newItem) {
    return oldItem['content'] != newItem['content'] ||
        oldItem['checked'] != newItem['checked'] ||
        oldItem['type'] != newItem['type'] ||
        oldItem['deadline'] != newItem['deadline'] ||
        oldItem['assigned_to'] != newItem['assigned_to'];
    // –ù–ï —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º position!
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è reorder
  void _animateReorderChange(String itemId) {
    print("üé¨ _animateReorderChange –≤—ã–∑–≤–∞–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞: $itemId");

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è reorder –∞–Ω–∏–º–∞—Ü–∏–∏
    final reorderController = AnimationController(
      duration: Duration(milliseconds: 800), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
      vsync: this,
    );

    _reorderAnimations[itemId] = reorderController;
    print("‚úÖ –°–æ–∑–¥–∞–Ω reorder –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è $itemId");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
    _setAnimationFlag(itemId, 'isReordering', true);
    print("üèÅ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ isReordering=true –¥–ª—è $itemId");

    // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è: —ç–ª–µ–º–µ–Ω—Ç –º–∏–≥–∞–µ—Ç
    reorderController.repeat(reverse: true, period: Duration(milliseconds: 400));
    print("üé≠ –ó–∞–ø—É—â–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è –º–∏–≥–∞–Ω–∏—è –¥–ª—è $itemId");

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 800ms
    Future.delayed(Duration(milliseconds: 800), () {
      print("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è $itemId");
      if (mounted && _reorderAnimations.containsKey(itemId)) {
        reorderController.stop();
        _setAnimationFlag(itemId, 'isReordering', false);
        _reorderAnimations.remove(itemId)?.dispose();
        print("üóëÔ∏è –û—á–∏—â–µ–Ω reorder –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è $itemId");
      }
    });
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
  void _setAnimationFlag(String itemId, String flagName, bool value) {
    print("üèÅ _setAnimationFlag: $itemId.$flagName = $value");

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        setState(() {
          final index = _localItems.indexWhere((item) => item['id'] == itemId);
          if (index != -1) {
            if (value) {
              _localItems[index][flagName] = true;
              print("‚úÖ –§–ª–∞–≥ $flagName —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ $itemId (index: $index)");
            } else {
              _localItems[index].remove(flagName);
              print("‚ùå –§–ª–∞–≥ $flagName —É–¥–∞–ª–µ–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ $itemId (index: $index)");
            }
          } else {
            print("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç $itemId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ _localItems –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ $flagName");
          }
        });
      }
    });
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º
  void _setTemporaryAnimationFlag(String itemId, String flagName, Duration duration) {
    _setAnimationFlag(itemId, flagName, true);

    Future.delayed(duration, () {
      if (mounted) {
        _setAnimationFlag(itemId, flagName, false);
      }
    });
  }

  void _createAnimationForItem(String itemId, {bool shouldAnimate = false}) {
    if (_itemAnimations.containsKey(itemId)) return;

    final controller = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    final scaleAnimation = Tween<double>(
      begin: shouldAnimate ? 0.8 : 1.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: controller,
      curve: Curves.elasticOut,
    ));

    final fadeAnimation = Tween<double>(
      begin: shouldAnimate ? 0.0 : 1.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: controller,
      curve: Curves.easeInOut,
    ));

    final slideAnimation = Tween<Offset>(
      begin: shouldAnimate ? const Offset(0.3, 0) : Offset.zero,
      end: Offset.zero,
    ).animate(CurvedAnimation(
      parent: controller,
      curve: Curves.easeOutCubic,
    ));

    _itemAnimations[itemId] = controller;
    _scaleAnimations[itemId] = scaleAnimation;
    _fadeAnimations[itemId] = fadeAnimation;
    _slideAnimations[itemId] = slideAnimation;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    if (shouldAnimate) {
      controller.forward();
    } else {
      controller.value = 1.0;
    }
  }

  void _animateItemChange(String itemId) {
    final controller = _itemAnimations[itemId];
    if (controller != null) {
      // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç "–ø—É–ª—å—Å–∞—Ü–∏–∏" –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
      controller.reset();
      controller.forward().then((_) {
        if (mounted) {
          // –ù–µ–±–æ–ª—å—à–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è
          controller.reverse().then((_) {
            if (mounted) {
              controller.forward();
            }
          });
        }
      });
    }
  }

  void _animateItemRemoval(String itemId, VoidCallback onComplete) {
    final controller = _itemAnimations[itemId];
    if (controller != null) {
      // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
      final removeController = AnimationController(
        duration: const Duration(milliseconds: 350),
        vsync: this,
      );

      final removeScale = Tween<double>(begin: 1.0, end: 0.0).animate(
          CurvedAnimation(parent: removeController, curve: Curves.easeInBack));

      final removeFade = Tween<double>(begin: 1.0, end: 0.0).animate(
          CurvedAnimation(parent: removeController, curve: Curves.easeOut));

      final removeSlide = Tween<Offset>(begin: Offset.zero, end: const Offset(-1.0, 0)).animate(
          CurvedAnimation(parent: removeController, curve: Curves.easeInCubic));

      _scaleAnimations[itemId] = removeScale;
      _fadeAnimations[itemId] = removeFade;
      _slideAnimations[itemId] = removeSlide;

      removeController.forward().then((_) {
        removeController.dispose();
        onComplete();
      });
    } else {
      onComplete();
    }
  }

  void _disposeAnimationForItem(String itemId) {
    _itemAnimations[itemId]?.dispose();
    _itemAnimations.remove(itemId);
    _scaleAnimations.remove(itemId);
    _fadeAnimations.remove(itemId);
    _slideAnimations.remove(itemId);

    // –û—á–∏—â–∞–µ–º reorder –∞–Ω–∏–º–∞—Ü–∏–∏
    _reorderAnimations[itemId]?.dispose();
    _reorderAnimations.remove(itemId);
  }

  void _disposeAllAnimations() {
    for (var controller in _itemAnimations.values) {
      controller.dispose();
    }
    _itemAnimations.clear();
    _scaleAnimations.clear();
    _fadeAnimations.clear();
    _slideAnimations.clear();

    // –û—á–∏—â–∞–µ–º reorder –∞–Ω–∏–º–∞—Ü–∏–∏
    for (var controller in _reorderAnimations.values) {
      controller.dispose();
    }
    _reorderAnimations.clear();
  }

  void _handlePointerDown(PointerDownEvent event, Map<String, dynamic> item) {
    _startPosition = event.localPosition;
    _longPressTriggered = false;
    _longPressedItem = item;
    _isDragging = false;
    _hasMoved = false;

    _longPressTimer = Timer(const Duration(milliseconds: 600), () {
      if (!_hasMoved && !_isDragging) {
        _longPressTriggered = true;
        HapticFeedback.mediumImpact();
      }
    });
  }

  void _handlePointerMove(PointerMoveEvent event) {
    if (_startPosition != null) {
      final distance = (event.localPosition - _startPosition!).distance;
      if (distance > 10) {
        _hasMoved = true;
        _longPressTimer?.cancel();
      }
    }
  }

  void _handlePointerUp(PointerUpEvent event) {
    if (_longPressTriggered && !_hasMoved && !_isDragging && _longPressedItem != null) {
      final itemToShow = _longPressedItem!;
      Future.delayed(Duration(milliseconds: 50), () {
        if (mounted) {
          widget.onShowItemOptions(itemToShow);
        }
      });
    }

    _cleanup();
  }

  void _handlePointerCancel(PointerCancelEvent event) {
    _cleanup();
  }

  void _cleanup() {
    _longPressTimer?.cancel();
    _longPressTriggered = false;
    _longPressedItem = null;
    _isDragging = false;
    _hasMoved = false;
    _startPosition = null;
  }

  void _handleTap(Map<String, dynamic> item) {
    if (!_longPressTriggered && !_hasMoved) {
      widget.onToggleEditing(item['id'], item['content']);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Expanded(
          child: ReorderableListView.builder(
            scrollController: widget.scrollController,
            physics: const BouncingScrollPhysics(),
            itemCount: _localItems.length,
            onReorder: (oldIndex, newIndex) {
              print("Reorder: oldIndex=$oldIndex, newIndex=$newIndex");

              _isDragging = true;
              _cleanup();

              if (oldIndex < newIndex) {
                newIndex -= 1;
              }

              HapticFeedback.lightImpact();

              final item = _localItems[oldIndex];

              // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
              setState(() {
                final movedItem = _localItems.removeAt(oldIndex);
                _localItems.insert(newIndex, movedItem);
              });

              widget.onReorderFinished(item, oldIndex, newIndex);
            },
            itemBuilder: (context, index) {
              final item = _localItems[index];
              final String itemId = item['id'];
              final bool isEditing = widget.editingItems[itemId] ?? false;

              return _buildAnimatedTaskItem(
                itemId,
                item,
                isEditing,
                index,
                key: ValueKey(itemId),
              );
            },
            proxyDecorator: (child, index, animation) {
              return AnimatedBuilder(
                animation: animation,
                builder: (context, child) {
                  final double scale = animation.value * 0.05 + 1.0;
                  return Transform.scale(
                    scale: scale,
                    child: Material(
                      elevation: 8,
                      borderRadius: BorderRadius.circular(8),
                      child: child,
                    ),
                  );
                },
                child: child,
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildAnimatedTaskItem(
    String itemId,
    Map<String, dynamic> item,
    bool isEditing,
    int index, {
    required Key key,
  }) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∏–º–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    AnimationType? animationType;

    bool isAppearing = item['isAppearing'] == true;
    bool isDisappearing = item['isDisappearing'] == true;
    bool isUpdating = item['isUpdating'] == true;
    bool isReordering = item['isReordering'] == true;

    print("üé≠ _buildAnimatedTaskItem –¥–ª—è $itemId: appearing=$isAppearing, disappearing=$isDisappearing, updating=$isUpdating, reordering=$isReordering");

    if (isAppearing) {
      animationType = AnimationType.add;
    } else if (isDisappearing) {
      animationType = AnimationType.remove;
    } else if (isUpdating) {
      animationType = AnimationType.update;
    } else if (isReordering) {
      animationType = AnimationType.reorder;
      print("üéØ –≠–ª–µ–º–µ–Ω—Ç $itemId –ø–æ–º–µ—á–µ–Ω –¥–ª—è reorder –∞–Ω–∏–º–∞—Ü–∏–∏");
    }

    Widget itemContent = _buildTaskItem(itemId, item, isEditing, index);

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏–º–µ–Ω—è–µ–º reorder –∞–Ω–∏–º–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    if (isReordering && _reorderAnimations.containsKey(itemId)) {
      print("üé® –ü—Ä–∏–º–µ–Ω—è–µ–º reorder –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è $itemId");
      itemContent = AnimatedBuilder(
        animation: _reorderAnimations[itemId]!,
        builder: (context, child) {
          double opacity = 0.7 + (_reorderAnimations[itemId]!.value * 0.3);
          double scale = 0.98 + (_reorderAnimations[itemId]!.value * 0.04);
          print("üé® Reorder –∞–Ω–∏–º–∞—Ü–∏—è $itemId: opacity=$opacity, scale=$scale");
          return Opacity(
            opacity: opacity,
            child: Transform.scale(
              scale: scale,
              child: Container(
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.blue, width: 2), // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
                  borderRadius: BorderRadius.circular(8),
                ),
                child: child,
              ),
            ),
          );
        },
        child: itemContent,
      );
    } else if (isReordering) {
      print("‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç $itemId –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ reordering, –Ω–æ –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏");
    }

    return Container(
      key: key,
      child: AnimatedTaskItemWidget(
        itemId: itemId,
        item: item,
        isEditing: isEditing,
        animationType: animationType,
        onAnimationComplete: () {
          print("üèÅ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è $itemId");
          // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
          if (mounted) {
            setState(() {
              final index = _localItems.indexWhere((i) => i['id'] == itemId);
              if (index != -1) {
                _localItems[index].remove('isAppearing');
                _localItems[index].remove('isDisappearing');
                _localItems[index].remove('isUpdating');
                // –ù–ï —É–±–∏—Ä–∞–µ–º isReordering –∑–¥–µ—Å—å, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –≤ _animateReorderChange
              }
            });
          }
        },
        child: itemContent,
      ),
    );
  }

  Widget _buildTaskItem(
    String itemId,
    Map<String, dynamic> item,
    bool isEditing,
    int index,
  ) {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Map<String, dynamic>? assignedUser;
    if (item['assigned_to'] != null) {
      assignedUser = widget.usersCache[item['assigned_to']];

      if (assignedUser == null) {
        widget.getCachedUserById(item['assigned_to']);
      }
    }

    final String type = item['type'] as String;
    final bool hasDeadline = item['deadline'] != null;
    final bool isTemporary = item['isTemporary'] == true;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–¥–ª–∞–π–Ω–∞
    Color containerColor = Theme.of(context).cardColor;
    Color borderColor = Colors.transparent;

    if (hasDeadline) {
      final deadlineColor = widget.getDeadlineColor(item['deadline']);
      containerColor = deadlineColor.withOpacity(0.05);
      borderColor = deadlineColor.withOpacity(0.3);
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
    Widget itemContent = _buildItemContent(item, isEditing, type);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –≤–∏–¥–∂–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
    Widget fullItem = Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        // –°—Ç—Ä–æ–∫–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        if ((hasDeadline || assignedUser != null) && !isEditing)
          AnimatedContainer(
            duration: Duration(milliseconds: 200),
            padding: const EdgeInsets.only(top: 8.0, bottom: 4.0, left: 16.0, right: 16.0),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                if (hasDeadline)
                  TweenAnimationBuilder<double>(
                    duration: Duration(milliseconds: 300),
                    tween: Tween(begin: 0.0, end: 1.0),
                    builder: (context, value, child) {
                      return Transform.scale(
                        scale: value,
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(
                              Icons.calendar_today,
                              size: 12,
                              color: widget.getDeadlineColor(item['deadline']),
                            ),
                            SizedBox(width: 4),
                            Text(
                              widget.formatDeadline(item['deadline']),
                              style: TextStyle(
                                fontSize: 12,
                                color: widget.isDeadlineExpired(item['deadline'])
                                    ? Colors.red
                                    : widget.getDeadlineColor(item['deadline']),
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      );
                    },
                  )
                else
                  SizedBox.shrink(),

                // –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if (assignedUser != null)
                  TweenAnimationBuilder<double>(
                    duration: Duration(milliseconds: 400),
                    tween: Tween(begin: 0.0, end: 1.0),
                    builder: (context, value, child) {
                      return Transform.scale(
                        scale: value,
                        child: _buildAssignedUserAvatar(assignedUser!),
                      );
                    },
                  ),
              ],
            ),
          ),

        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
        AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeInOut,
          margin: EdgeInsets.only(
            left: 8.0,
            right: 8.0,
            top: index == 0 && !hasDeadline ? 4.0 : 0.0,
            bottom: 4.0,
          ),
          decoration: BoxDecoration(
            color: isTemporary
                ? Theme.of(context).colorScheme.surface.withOpacity(0.5)
                : containerColor,
            borderRadius: BorderRadius.circular(8.0),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 2,
                offset: Offset(0, 1),
              ),
            ],
            border: hasDeadline ? Border.all(color: borderColor, width: 1.5) : null,
          ),
          child: Material(
            color: Colors.transparent,
            borderRadius: BorderRadius.circular(8.0),
            child: Padding(
              padding: const EdgeInsets.all(8.0),
              child: itemContent,
            ),
          ),
        ),
      ],
    );

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    Widget finalWidget;

    if (widget.canEdit) {
      if (type == 'checklist') {
        finalWidget = Stack(
          children: [
            fullItem,
            Positioned(
              left: 80,
              right: 0,
              top: 0,
              bottom: 0,
              child: Listener(
                onPointerDown: (event) => _handlePointerDown(event, item),
                onPointerMove: _handlePointerMove,
                onPointerUp: _handlePointerUp,
                onPointerCancel: _handlePointerCancel,
                child: GestureDetector(
                  onTap: () => _handleTap(item),
                  child: Container(color: Colors.transparent),
                ),
              ),
            ),
          ],
        );
      } else {
        finalWidget = Listener(
          onPointerDown: (event) => _handlePointerDown(event, item),
          onPointerMove: _handlePointerMove,
          onPointerUp: _handlePointerUp,
          onPointerCancel: _handlePointerCancel,
          child: GestureDetector(
            onTap: () => _handleTap(item),
            child: fullItem,
          ),
        );
      }
    } else {
      finalWidget = fullItem;
    }

    return finalWidget;
  }

  Widget _buildItemContent(Map<String, dynamic> item, bool isEditing, String type) {
    if (isEditing) {
      return AnimatedContainer(
        duration: Duration(milliseconds: 200),
        curve: Curves.easeInOut,
        padding: EdgeInsets.all(4.0),
        child: TextField(
          controller: widget.itemControllers[item['id']],
          focusNode: widget.itemFocusNodes[item['id']],
          decoration: InputDecoration(
            hintText: AppLocalizations.of(context)!.enterTextHint,
            suffixIcon: item['isSaving'] == true
                ? Container(
                    width: 24,
                    height: 24,
                    padding: EdgeInsets.all(8.0),
                    child: CircularProgressIndicator(strokeWidth: 2),
                  )
                : null,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(color: Theme.of(context).colorScheme.primary),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(
                  color: Theme.of(context).colorScheme.primary.withOpacity(0.5)),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(8),
              borderSide: BorderSide(color: Theme.of(context).colorScheme.primary, width: 2),
            ),
          ),
          maxLines: null,
          autofocus: true,
        ),
      );
    }

    switch (type) {
      case 'header':
        return AnimatedContentChange(
          content: item['content'],
          builder: (content) => AnimatedPadding(
            duration: const Duration(milliseconds: 300),
            curve: Curves.easeInOut,
            padding: const EdgeInsets.only(top: 16.0),
            child: Container(
              padding: const EdgeInsets.all(8.0),
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.primary.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8.0),
              ),
              child: Center(
                child: Text(
                  content,
                  style: TextStyle(
                    fontSize: 22.0,
                    fontWeight: FontWeight.bold,
                    color: Theme.of(context).colorScheme.primary,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ),
        );

      case 'note':
        return AnimatedContentChange(
          content: item['content'],
          builder: (content) => Container(
            padding: const EdgeInsets.all(8.0),
            alignment: Alignment.center,
            child: Text(
              content,
              style: TextStyle(fontSize: 16.0),
              textAlign: TextAlign.center,
            ),
          ),
        );

      case 'checklist':
        return Row(
          children: [
            Container(
              width: 40,
              height: 40,
              alignment: Alignment.center,
              child: GestureDetector(
                onTap: () => widget.onCheckChanged(item['id'], !(item['checked'] ?? false)),
                child: AnimatedContainer(
                  duration: Duration(milliseconds: 200),
                  width: 24,
                  height: 24,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(4),
                    border: Border.all(
                      color: (item['checked'] ?? false)
                          ? Theme.of(context).colorScheme.primary
                          : Colors.grey,
                      width: 2,
                    ),
                    color: (item['checked'] ?? false)
                        ? Theme.of(context).colorScheme.primary
                        : Colors.transparent,
                  ),
                  child: AnimatedSwitcher(
                    duration: Duration(milliseconds: 200),
                    child: (item['checked'] ?? false)
                        ? Icon(
                            Icons.check,
                            size: 16,
                            color: Colors.white,
                            key: ValueKey('checked'),
                          )
                        : SizedBox.shrink(key: ValueKey('unchecked')),
                  ),
                ),
              ),
            ),
            Expanded(
              child: AnimatedStyleTransition(
                style: TextStyle(
                  fontSize: 16.0,
                  decoration: (item['checked'] ?? false)
                      ? TextDecoration.lineThrough
                      : TextDecoration.none,
                  color: (item['checked'] ?? false)
                      ? Theme.of(context).colorScheme.onSurface.withOpacity(0.6)
                      : Theme.of(context).colorScheme.onSurface,
                ),
                child: AnimatedContentChange(
                  content: item['content'],
                  builder: (content) => Text(content),
                ),
              ),
            ),
            if (item['isSaving'] == true)
              Padding(
                padding: const EdgeInsets.only(right: 8.0),
                child: SizedBox(
                  width: 16,
                  height: 16,
                  child: CircularProgressIndicator(strokeWidth: 2),
                ),
              ),
          ],
        );

      default:
        return AnimatedContentChange(
          content: item['content'],
          builder: (content) => Text(
            content,
            style: const TextStyle(fontSize: 16.0),
          ),
        );
    }
  }

  Widget _buildAssignedUserAvatar(Map<String, dynamic> assignedUser) {
    final userId = assignedUser['id'];
    final login = assignedUser['login'] ?? '';

    Widget avatarWidget = AnimatedContainer(
      duration: Duration(milliseconds: 300),
      padding: EdgeInsets.symmetric(horizontal: 6, vertical: 2),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 1,
            offset: Offset(0, 1),
          ),
        ],
        border: widget.onNavigateToProfile != null
            ? Border.all(
                color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
                width: 1,
              )
            : null,
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          AnimatedSwitcher(
            duration: Duration(milliseconds: 300),
            child: assignedUser['avatar_url'] != null
                ? CircleAvatar(
                    key: ValueKey('avatar_${userId}'),
                    radius: 10,
                    backgroundImage: NetworkImage(assignedUser['avatar_url']),
                  )
                : CircleAvatar(
                    key: ValueKey('initials_${userId}'),
                    radius: 10,
                    backgroundColor: widget.getAvatarColor(userId),
                    child: Text(
                      login.isNotEmpty ? login[0].toUpperCase() : '',
                      style: TextStyle(
                        fontSize: 8,
                        fontWeight: FontWeight.bold,
                        color: Theme.of(context).colorScheme.onPrimary,
                      ),
                    ),
                  ),
          ),
          SizedBox(width: 4),
          AnimatedDefaultTextStyle(
            duration: Duration(milliseconds: 200),
            style: TextStyle(
              fontSize: 10,
              fontWeight: FontWeight.w500,
            ),
            child: Text(
              login.isEmpty ? 'User' : login,
              overflow: TextOverflow.ellipsis,
              style: TextStyle(color: Theme.of(context).colorScheme.primary),
            ),
          ),
        ],
      ),
    );

    if (widget.onNavigateToProfile != null) {
      return GestureDetector(
        onTap: () {
          widget.onNavigateToProfile!(userId);
        },
        child: avatarWidget,
      );
    }

    return avatarWidget;
  }

  void animateItemRemoval(String itemId, VoidCallback onComplete) {
    _animateItemRemoval(itemId, onComplete);
  }

  void animateItemChange(String itemId) {
    _animateItemChange(itemId);
  }
}